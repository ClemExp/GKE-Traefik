Key findings:
- TLS handshake & different cipher suites times
- Cloudfare, google.. others? Only support 3 TLS cipher suites with their certificates
- With Google, AWS managed certificates - you cannot perform full TLS - as no private key available to encrypt secrets in K8s
    - Have to bring your own certificate
- OQS in K8s not possible yet I think via TLS passthrough (as these certificates are not recognized by authorities).. 
    would need some form of TLS bridging from traefik - pod
    - Which would in effect not be a good comparison of performance of TLS E2E - Limit OQS comparision testing
- Moving more to cloud and K8s
    Perhaps for highly senstive data need to look for different model - Openshift in managed infrastrcture in-house or kubespray

Further study:
- OQS Further
- Service mesh for TLS management
    "Consider using a service mesh solution like Istio or Linkerd to manage encryption, authentication, and authorization for internal service-to-service communication"
    "To secure communication between services within the cluster, you can use mTLS (mutual TLS) or TLS encryption for internal traffic. You can achieve this by configuring Traefik to terminate TLS for external traffic (as you've done in the Ingress resources) and also configuring it to encrypt traffic between services using mTLS."

Problems encountered:
- Took awhile to figure out private key and certificates
- OQS - TLS bridging and implications
- Terraform creation in GKE, not always easy - had to use helm raw or kubectl provider instead of google tf objects
- Changing cipher suites for TLS1.3 (Testing tools in go don't support this, also traefik ingress controller doesn't support)
    Workaround - maybe can use apache bench, curl seems to pick up change in openssl.cnf on MAC
    Try with traefik middleware perhaps
