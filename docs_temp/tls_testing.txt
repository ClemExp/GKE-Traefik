To try::
- Check direct link to overleaf (login with credentials from other goolge profile?)
- Install k6 to VSC & try dynamic POST loads
- Start arch diagrams for tests & main arch
- Later:
    - Google maanged certificates are meant specifically for LB, so recommendation is to set up ingress controller to use self-managed certificates (lets encrypt)
        - So we still keep the google managed certificate on LB i assume?
        - LetsEncrpt via cert manager or manual issuing of certificate?
        - Can try manual cert creation & specify it in helm (as per localDS)- https://www.doyler.net/security-not-included/google-domains-lets-encrypt
            https://www.reddit.com/r/selfhosted/comments/11gdoie/google_domains_now_allows_for_dns_based/
            https://www.digitalocean.com/community/tutorials/how-to-secure-your-site-in-kubernetes-with-cert-manager-traefik-and-let-s-encrypt
    - OQS - doubt can deploy in K8s, as certificate won't support algorithm
        - could try from traefik - OQS pod (but would change TLS version so some type of SSL bridging would be required (effectively new handskae within K8s) i.e. SSL passthrough would not work)
            You use Traefik as an HTTP reverse proxy. Traefik then handle the TLS termination, read the HTTP packet and can perform routing based on your PathPrefix rule. You can then create a dedicated "server transport" to re-secure the traffic between Traefik and your backend.
        - Could try docker and generate cert, then have prometheus monitor this docker instance separately
        - Or perahps better to limit to TLS handshake comparison on docker image


Testing SSL handshake & TLS testing comparing HTTP & HTTPS:
#############################################################

TLS v HTTP testing samples & methodology - update Dec2022 (originally from 2015)
https://www.keycdn.com/blog/https-performance-overhead

SSL handshake performance may not be so much in the TLS CPU work, but more in the network latency (round trips to server):
https://sking7.github.io/articles/44961356.html
	- good mechanism for isolating handshakes - tcpdump, openssl s_client
	- conclusion of this is proximity of user to server is more important than CPU intensive crypto

https://ptuladhar3.medium.com/testing-ssl-tls-handshake-latency-using-ssl-handshake-6a0c497890d1
Takes out the manual measuring with tcpdummp openssl etc.. Docker image to measure ssl handshake time

Checking what cipher suites are supported by certificate / website:
###################################################################

SSL Labs Server Test by Qualys: https://www.ssllabs.com/ssltest/
    - Really interesting - only 3 cipher suites supported for TLS1.3 with website (whoami.clem..) - (TLS_AES_128_GCM_SHA256 - 128, TLS_AES_256_GCM_SHA384 - 256, TLS_CHACHA20_POLY1305_SHA256 - 256)
    - Only 2 supported (not weak; weak 7) for TLS1.2
    - TLS1.1 & 1.0 still supported
High-Tech Bridge SSL/TLS Security Test: https://www.htbridge.com/ssl/
DigiCert SSL Server Test: https://www.digicert.com/help/
nmap --script ssl-enum-ciphers -p 443 yourwebsite.com

So appears google only support 3 cipher suites for TLS1.3, same as cloudfare & lets encrypt (ref Chatgpt):
https://developers.cloudflare.com/ssl/reference/cipher-suites/supported-cipher-suites/

Changing cipher suites:
#######################

"On a client, you typically want to not restrict the cipher suite configuration: The client makes an offer, and the server chooses one of the offered cipher suites. 
So if you're configuring a client, in most cases you don't want to configure anything at all: Your default TLS implementation should allow a wide range by default. which you should keep."

- Ciphers and TLS testing
    Try SSL policy altering for 3 supported TLS1.3 ciphers (check ssllabs results) - Changing SSLPolicy does not work
    Run nmap to check ciphers - shows correct ciphers! Like SSLLabs Qualys
    Try "openssl s_client -connect" - removing ciphers (ALL-) - correctly removes!
    Re-prioritize ciphers on MAC to be 1 of the other 3 TLS1.3 ciphers we will use

Local Test harness:
####################
Use apache benchmark for simple GET requests
Use curl (--ciphers) for individual requests
Try K6 for dynamic POSTS (https://farhan-labib.medium.com/load-testing-made-easy-with-k6-using-faker-library-and-csv-files-c997d48fb6e2)
